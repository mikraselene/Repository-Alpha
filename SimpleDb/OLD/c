#include <fmt/core.h>
#include <fmt/ostream.h>
#include <fmt/color.h>
#include <iostream>
#include <sstream>
#include <vector>
#include <map>
#include <numeric>

#include "bptree.hpp"
#include "util.hpp"

struct Key
{
    Key() {}
    explicit Key(int64_t id) : id(id) {}

    bool operator<(const Key &t) const { return strcmp(key, t.key) < 0; }
    bool operator<=(const Key &t) const { return strcmp(key, t.key) <= 0; }
    bool operator==(const Key &t) const { return strcmp(key, t.key) == 0; }
    std::ostream &operator<<(std::ostream &out)
    {
        out << key;
        return out;
    }

    char key[64];
    int64_t id = -1;
};

struct Record
{
    Record() {}
    Record(uint32_t pos, uint32_t len) : pos(pos), len(len) {}

    uint32_t pos = 0;
    uint32_t len = 0;
};

class Database
{
    friend class CommandLine;

protected:
    void find(std::string value)
    {
        Key k(-1);
        snprintf(k.key, sizeof(k.key), "%s", value.c_str());
        auto iter = bt->find_geq(k);
        auto cnt = 0;
        std::vector<std::pair<Record, std::string>> results;
        while (true)
        {
            if (std::string(iter->key).find(value) == 0)
            {
                cnt++;
                std::string str(iter->key);
                auto num = fmt::format("[{}] ", cnt);
                auto found = str.substr(0, value.size());
                str = str.substr(value.size(), str.size() - value.size());
                fmt::print(fg(fmt::terminal_color::bright_blue), "{:>5}", num);
                fmt::print(fg(fmt::terminal_color::bright_green), found);
                fmt::print("{}\n", str);
                Record s;
                record_manager->recover(iter->id, &s);
                results.push_back({s, iter->key});
                iter++;
                continue;
            }
            break;
        }
        fmt::print("{} record(s) found.\n", cnt);
    }
    void insert(Record r, std::string key)
    {
        record_manager->save(id, &r);
        char that[64];
        Key k(id);
        snprintf(k.key, sizeof(k.key), "%s", key.c_str());
        bt->insert(k);
        id++;
    }
    void select()
    {
        bt->print();
    }
    void db_open(std::string name, bool new_file)
    {
        auto idx = fmt::format("database/{}_idx.bin", name);
        auto rec = fmt::format("database/{}_rec.bin", name);
        page_manager = std::make_shared<Pager>(idx, new_file);
        record_manager = std::make_shared<Pager>(rec, new_file);
        bt = new bptree<Key, 3>(page_manager);
        Record s;
        id = record_manager->get_id(&s);
        fmt::print("{}\n", record_manager->get_id(&s));
    }
    void db_close()
    {
        fmt::print("So long...\n");
    }

private:
    int id = 0;
    std::shared_ptr<Pager> page_manager;
    std::shared_ptr<Pager> record_manager;
    bptree<Key, 3> *bt;
};
Database db;

class CommandLine
{
    enum class MetaCommandResult
    {
        SUCCESS,
        UNRECOGNIZED_COMMAND,
    };
    enum class Statement
    {
        INSERT,
        SELECT,
        OPEN,
        EXIT,
        FIND,
        READ,
        UNKNOWN,
    };
    enum class State
    {
        FAILURE,
        SUCCESS,
    };
    std::map<std::string, Statement> stmt{
        {"insert", Statement::INSERT},
        {"select", Statement::SELECT},
        {"open", Statement::OPEN},
        {"exit", Statement::EXIT},
        {"read", Statement::READ},
        {"find", Statement::FIND},
    };

public:
    CommandLine(std::string cmd, std::vector<std::string> a)
        : command(cmd), args(a) {}
    void execute()
    {
        execute_command(command_statement());
    }
    auto command_statement() -> Statement
    {
        return stmt.find(command) != stmt.end()
                   ? stmt[command]
                   : Statement::UNKNOWN;
    }
    void execute_command(Statement s)
    {
        switch (s)
        {
        case Statement::INSERT:
        {
            execute_insert();
            break;
        }
        case Statement::READ:
        {
            execute_read();
            break;
        }
        case Statement::SELECT:
        {
            execute_select();
            break;
        }
        case Statement::FIND:
        {
            execute_find();
            break;
        }
        case Statement::EXIT:
        {
            execute_exit();
            exit(EXIT_SUCCESS);
        }
        case Statement::OPEN:
        {
            execute_open();
            break;
        }
        default:
        {
            break;
        }
        }
    }

private:
    void execute_exit()
    {
        db.db_close();
    }
    void execute_read()
    {
    }
    void execute_create()
    {
        if (args.size() != 1)
        {
            throw invalid_arguments_num(1, args.size());
            return;
        }
        auto name = args[0];
        db.db_open(name, true);
        fmt::print(fg(fmt::terminal_color::bright_green),
                   "Database {} is created.\n", name);
    }
    void execute_open()
    {
        try
        {
            if (args.size() != 1)
            {
                throw invalid_arguments_num(1, args.size());
                return;
            }
            auto name = args[0];
            db.db_open(name, true);
            fmt::print(fg(fmt::terminal_color::bright_green),
                       "Database {} is open.\n", name);
        }
        catch (invalid_arguments_num &e)
        {
            fmt::print(fg(fmt::terminal_color::bright_red), "{}", e.what());
            fmt::print("Expected {} argument(s), but got {}.\n",
                       e.expected_num, e.got_num);
            fmt::print(fg(fmt::terminal_color::bright_cyan), "Format: ");
            fmt::print("open [name]\n");
            return;
        }
        catch (file_not_exist &e)
        {
            auto fn = e.file_name;
            fmt::print(fg(fmt::terminal_color::bright_cyan), "{}\n", e.what());
            fmt::print("Create it now? (y/n) ");
            std::string str;
            getline(std::cin, str);
            if (str == "y")
            {
                db.db_open(args[0], true);
                fmt::print(fg(fmt::terminal_color::bright_green),
                           "Database {} is created.\n", args[0]);
#if 0
                auto name = fn.substr(0, fn.find("."));
                auto res1 = remove(fmt::format("{}.bin", name).c_str());
                auto res2 = remove(fmt::format("{}.index", name).c_str());
                (res1 == EOF || res2 == EOF)
                    ? fmt::print("This message should not be shown...\n")
                    : fmt::print(fg(fmt::terminal_color::bright_green),
                                 "File removed.\n");
#endif
            }
            return;
        }
        catch (file_opening_error &e)
        {
            fmt::print("File opening error.\n");
            return;
        }
    }
    void execute_insert()
    {
        clk.tick();
        int64_t id;
        std::vector<std::string> str{
            "Let me not to the marriage of true minds",
            "Admit impediments. Love is not love",
            "Which alters when it alteration finds,",
            "Or bends with the remover to remove:",
            "O, no! it is an ever-fix`ed mark,",
            "That looks on tempests and is never shaken;",
            "It is the star to every wand'ring bark,",
            "Whose worth's unknown, although his heighth be taken.",
            "Love's not Time's fool, though rosy lips and cheeks",
            "Within his bending sickle's compass come;",
            "Love alters not with his brief hours and weeks,",
            "But bears it out even to the edge of doom:",
            "If this be error and upon me proved,",
            "I never writ, nor no man ever loved.",
            "In faith I do not love thee with mine eyes,",
            "For they in thee a thousand errors note;",
            "But `tis my heart that loves what they despise,",
            "Who in despite of view is pleased to dote.",
            "Nor are mine ears with thy tongue`s tune delighted;",
            "Nor tender feeling to base touches prone,",
            "Nor taste, nor smell, desire to be invited",
            "To any sensual feast with thee alone.",
            "But my five wits, nor my five senses can",
            "Dissuade one foolish heart from serving thee,",
            "Who leaves unswayed the likeness of a man,",
            "Thy proud heart`s slave and vassal wretch to be.",
            "Only my plague thus far I count my gain,",
            "That she that makes me sin awards me pain.",
        };
        std::vector<std::pair<Record, std::string>> v{};
        int i = 0;
        for (auto s : str)
        {
            Record r(i, i * 2);
            i++;
            v.push_back({r, s});
        }
        for (auto i : v)
        {
            db.insert(i.first, i.second);
        }
        clk.tock();
        fmt::print("INSERT OK");
        clk.print_time_cost();
        fmt::print("\n");
    }
    void execute_select()
    {
        db.select();
        fmt::print("SELECT OK");
        fmt::print("\n");
    }
    void execute_find()
    {
        print_prompt2();
        std::string str;
        getline(std::cin, str);
        if (str == "")
        {
        }
        db.find(str);
        fmt::print("FIND OK");
        fmt::print("\n");
    }
    std::string command;
    std::vector<std::string> args;
};

int main()
{
    print_msg();
    while (true)
    {
        print_prompt();
        std::string str, command, argument;
        getline(std::cin, str);
        std::stringstream in(str);
        std::vector<std::string> args;
        in >> command;
        while (in >> argument)
        {
            args.push_back(argument);
        }
        CommandLine cmdln(command, args);
        cmdln.execute();
    }
}
