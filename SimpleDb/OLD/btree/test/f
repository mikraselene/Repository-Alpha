//
// Created by jaoks on 5/17/20.
//

#include <gtest/gtest.h>
#include <string>
#include <vector>
#include "../src/btree.h"
#include "../src/pagemanager.h"
using std::string;
using std::vector;
struct Key
{
    bool operator<(const Key &that) const { return this->key < that.key; }
    bool operator<=(const Key &that) const { return this->key <= that.key; }
    bool operator==(const Key &that) const { return this->key == that.key; }

    string key;
    int64_t page_id;
    std::ostream &operator<<(std::ostream &out)
    {
        out << key;
        return out;
    }
};

struct Record
{
    string key;
    uint32_t pos;
    uint32_t len;
};

constexpr uint64_t PAGE_SIZE = 1024;
constexpr uint64_t BTREE_ORDER = 3;
// (PAGE_SIZE - (6 * sizeof(int64_t) + sizeof(Key))) /
// (sizeof(Key) + sizeof(int64_t));

struct BTreeTest : public ::testing::Test
{
};

TEST_F(BTreeTest, TestC)
{
    std::shared_ptr<pagemanager> pm =
        std::make_shared<pagemanager>("b+tree.index", true);
    btree<Key, BTREE_ORDER> bt(pm);
    pagemanager record_manager("students.bin", true);
    int64_t page_id;
    vector<Record> v{
        {"llll", 0, 1},
        {"aaaa", 0, 1},
        {"aaabx", 0, 1},
        {"aaax", 0, 1},
        {"aaaz", 0, 1},
        {"aabd", 0, 1},
        {"acdv", 0, 1},
        {"bxca", 0, 1},
        {"ecad", 0, 1},
        {"zzzz", 0, 1},
        {"sfcd", 0, 1},
        {"qxcc", 0, 1},
    };
    page_id = 1;
    for (auto i : v)
    {
        record_manager.save(page_id, i);
        bt.insert(Key{i.key, page_id});
        page_id++;
    }
    auto iter = bt.find(Key{"aaaa", -1});
    auto end = bt.find(Key{"zzzz", -1});
    //bt.print_tree();
    for (; iter != end; ++iter)
    {
        auto pair = *iter;
        Record s;
        record_manager.recover(pair.page_id, s);
        std::cout << "KEY = " << s.key << '\n';
    }
}
